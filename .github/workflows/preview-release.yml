name: ðŸš€Preview Release


env:
  PROJECT_NAME: CICD
  BUILD_CONFIG: Debug
  NET_SDK_VERSION: 6.0.101 # Changing this means changing ARTIFACT_FOLDER_NAME
  ARTIFACT_FOLDER_NAME: '6.0.101' # Changing this means changing NET_SDK_VERSION


on:
  workflow_dispatch: # Preview releases are only done manually


jobs:
  Validate_Version:
    name: Validate Version
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Get Version From Project File
      id: proj-file-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    # TODO: Remove this once the VersionValidator has its 'fail-if-contains' feature is implemented
    - name: Validate Version Type
      run: |
        $projFileVersion = "${{ steps.proj-file-version.outputs.version }}";

        # If the version is not a preview type, fail
        if ($projFileVersion.Contains("-preview.") -eq $false)
        {
            echo "The version must be a preview version type for a preview release.";
            echo "Valid Version Example: v1.2.3-preview.4";

            exit 1 # Fail
        }

    # TODO: Make use of new optional input 'fail-if-contains' for preview.3 of this action once it has been implemented
    - name: Validate Version
      uses: KinsonDigital/VersionValidator@v1.0.0-preview.2
      with:
        nuget-package-name: "KinsonDigital.${{ env.PROJECT_NAME }}"
        version: "${{ steps.proj-file-version.outputs.version }}"
        check-nuget: "true"
        fail-if-nuget-version-exists: "true"


  Validate_Branch_Name:
    name: Validate Branch Name
    runs-on: windows-latest
    steps:
    # TODO: Replace this with the new upcoming branch validation github action
    - name: Validate Branch Name
      run: |
        # If the branch is not a release branch, fail the workflow
        if ("${{ github.ref }}".Contains("release/v") -eq $false)
        {
          echo "Preview releases can only be performed with 'release/v*.*.*' branches."
          echo "Example Preview Release Branch Name: release/v1.2.3"
          exit 1 # Fail
        }
        else
        {
          echo "Branch '${{ github.ref }}' is a valid release branch."
        }

  Validate_Release_Notes_Exist:
    name: Validate Release Notes Exist
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Get Version From Project File
      id: proj-file-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check For Release Notes
      run: |
        [string]$version = "${{ steps.proj-file-version.outputs.version }}";
        [string]$filePath = "${{ github.workspace }}\Documentation\ReleaseNotes\PreviewReleases\Release-Notes-v$version.md";

        if (-not([System.IO.File]::Exists($filePath))) {
          Write-Host "A preview release notes file '$filePath' does not exist.";
          Write-Host "You must add release notes for preview releases.";

          exit 1 # Fail
        }


  Build_Test_Publish_Library:
    name: Build, Test & Publish
    runs-on: windows-latest
    needs: [Validate_Version, Validate_Branch_Name, Validate_Release_Notes_Exist]
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NET_SDK_VERSION }}

    - name: Get Version From Project File
      id: proj-file-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Display Workflow Info
      run: |
        echo "Current Branch: ${{ github.ref }}"
        echo "Project File Version: ${{ steps.proj-file-version.outputs.version }}"

    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"

    - name: Build
      run: dotnet build "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" `
        -c ${{ env.BUILD_CONFIG }} `
        --no-restore `
        -a win-x64

    - name: Execute Unit Tests
      run: dotnet test "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/${{ env.PROJECT_NAME }}Tests.csproj" `
        -c ${{ env.BUILD_CONFIG }} `
        --collect:"XPlat Code Coverage" `
        --no-restore `
        -a win-x64

    # - name: Publish Code Coverage Results
    #   uses: codecov/codecov-action@v1.5.2
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     file: ${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/TestResults/**/coverage.cobertura.xml

    # - name: Publish Build Artifacts
    #   uses: actions/upload-artifact@v2.2.3
    #   with:
    #     name: ${{ env.PROJECT_NAME }} Build Artifacts
    #     path: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/bin/${{ env.BUILD_CONFIG }}/net${{ env.ARTIFACT_FOLDER_NAME }}
    #     error: There was an issue uploading the build artifact

    - name: Setup Nuget
      uses: NuGet/setup-nuget@v1.0.5

    - name: Create Nuget Package
      run: dotnet pack "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" `
        -o "${{ github.workspace }}" `
        -c ${{ env.BUILD_CONFIG }}

    - name: Publish Nuget Package
      run: dotnet nuget push "${{ github.workspace }}/KinsonDigital.${{ env.PROJECT_NAME }}.${{ steps.proj-file-version.outputs.version }}.nupkg" `
        --api-key ${{ secrets.NUGET_ORG_API_KEY }} `
        --source https://api.nuget.org/v3/index.json
